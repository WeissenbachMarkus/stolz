/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.stolz;

import com.mycompany.stolz.ReadJSON.Modul;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.concurrent.CancellationException;
import java.util.concurrent.ExecutionException;
import java.util.stream.Collectors;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.SwingWorker;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author markus
 */
public class Display extends javax.swing.JFrame
{

    private boolean fileChoosen;
    private ReadCSVFile readCSVFile;
    private ReadJSON readJSON;
    private final ReadXML readXML;

    /**
     * Creates new form NewJFrame
     */
    public Display()
    {
        initComponents();
        this.fileChoosen = false;
        this.readCSVFile = new ReadCSVFile();
        this.readJSON = new ReadJSON();
        this.readXML=new ReadXML();

        FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV", "csv");
        this.fileChooser.setFileFilter(filter);
        this.fileChooser.setCurrentDirectory(new File(System.getProperty("user.dir")));

        this.pack();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        fileChooser = new JFileChooser();
        labelCsvPath = new JLabel();
        openFileButton = new JButton();
        jScrollPane1 = new JScrollPane();
        output = new JTextArea();
        showPath = new JLabel();
        read = new JButton();
        error = new JLabel();
        jLabel1 = new JLabel();
        url = new JTextField();
        json = new JButton();
        jButton1 = new JButton();
        jLabel2 = new JLabel();
        xmlPath = new JLabel();

        fileChooser.setDialogTitle("This is my open dialog");

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lagerausgleich");

        labelCsvPath.setText("Pfad:");
        labelCsvPath.setToolTipText("");

        openFileButton.setText("Datei Ã¶ffnen");
        openFileButton.setActionCommand("openFile");
        openFileButton.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                openFileButtonActionPerformed(evt);
            }
        });

        output.setColumns(20);
        output.setRows(5);
        jScrollPane1.setViewportView(output);

        read.setText("lesen");
        read.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                readActionPerformed(evt);
            }
        });

        jLabel1.setText("URL:");

        url.setText("http://cms.alexandertechnik-schultka.de/schnittstelle/getAllModuls");

        json.setText("JSON anzeigen");
        json.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                jsonActionPerformed(evt);
            }
        });

        jButton1.setText("XML lesen");
        jButton1.addActionListener(new ActionListener()
        {
            public void actionPerformed(ActionEvent evt)
            {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Pfad:");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(error, GroupLayout.PREFERRED_SIZE, 253, GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelCsvPath)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(showPath, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(openFileButton)
                                .addGap(13, 13, 13)
                                .addComponent(read))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(url, GroupLayout.PREFERRED_SIZE, 380, GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(xmlPath, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                    .addComponent(json)
                                    .addComponent(jButton1))))))
                .addGap(17, 17, 17))
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(labelCsvPath)
                            .addComponent(showPath)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                            .addComponent(openFileButton)
                            .addComponent(read))))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(url, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(json))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(xmlPath))
                    .addComponent(jButton1))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED, 16, Short.MAX_VALUE)
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 154, GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(error, GroupLayout.PREFERRED_SIZE, 17, GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void openFileButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_openFileButtonActionPerformed
        int returnVal = fileChooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION)
        {
            File file = fileChooser.getSelectedFile();

            String absolutePathCSV = file.getAbsolutePath();

            this.showPath.setText(absolutePathCSV);
            this.readCSVFile.setCSVpath(absolutePathCSV);

            this.pack();
            this.fileChoosen = true;
            this.output.setText("");
            this.error.setText("");
        }
    }//GEN-LAST:event_openFileButtonActionPerformed

    public void setResult(String result)
    {

        this.error.setText("Fertig!");
        this.output.setText(result);
    }

    private String renderCSVcontent(ArrayList<String[]> list)
    {

        System.out.println("here");
        String[] header = list.get(0);
        list.remove(0);

        return list.stream()
                .map(e ->
                        {
                            String row = "";
                            for (int i = 0; i < header.length; i++)
                            {
                                row += header[i] + " : " + e[i].trim();
                                if (i != header.length - 1)
                                {
                                    row += ",  ";
                                }
                            }
                            return row;
                }).collect(Collectors.joining("\n"));

    }

    private void readActionPerformed(ActionEvent evt)//GEN-FIRST:event_readActionPerformed
    {//GEN-HEADEREND:event_readActionPerformed
        if (this.fileChoosen)
        {
            this.output.setText("");

            SwingWorker<String, Void> worker = new SwingWorker<String, Void>()
            {

                @Override
                protected String doInBackground() throws Exception
                {
                    System.out.println("here");
                    return renderCSVcontent(readCSVFile.read());
                }

                @Override
                protected void done()
                {
                    try
                    {
                        setResult(get());
                    } catch (CancellationException ex)
                    {
                        ex.printStackTrace();
                    } catch (InterruptedException ex)
                    {
                        ex.printStackTrace();
                    } catch (ExecutionException ex)
                    {
                        ex.printStackTrace();
                    }
                }

            };

            worker.execute();

        } else
        {
            this.error.setText("Es wurde keine Datei ausgewÃ¤hlt!");
        }

    }//GEN-LAST:event_readActionPerformed

    private String renderModuls(Modul[] moduls)
    {
        System.out.println("here");
        return Arrays.asList(moduls)
                .stream()
                .map(e->e.toString())
                .collect(Collectors.joining("\n"));
    }
    private void jsonActionPerformed(ActionEvent evt)//GEN-FIRST:event_jsonActionPerformed
    {//GEN-HEADEREND:event_jsonActionPerformed
        if (url.getText().length() > 0)
        {
            this.output.setText("");

            SwingWorker<Modul[], Void> worker = new SwingWorker<Modul[], Void>()
            {

                @Override
                protected Modul[] doInBackground() throws Exception
                {
                    System.out.println("here");
                    return readJSON.parseToModul(readJSON.callURL(url.getText()));
                }

                @Override
                protected void done()
                {
                    try
                    {
                        setResult(renderModuls(get()));
                    } catch (CancellationException ex)
                    {
                        ex.printStackTrace();
                    } catch (InterruptedException ex)
                    {
                        ex.printStackTrace();
                    } catch (ExecutionException ex)
                    {
                        ex.printStackTrace();
                    }
                }

            };

            worker.execute();
        }

    }//GEN-LAST:event_jsonActionPerformed

    private void jButton1ActionPerformed(ActionEvent evt)//GEN-FIRST:event_jButton1ActionPerformed
    {//GEN-HEADEREND:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments ////
     */
    public static void main(String args[])
    {
        /* Set the Dracula look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Dracula".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Display.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Display().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel error;
    private JFileChooser fileChooser;
    private JButton jButton1;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JScrollPane jScrollPane1;
    private JButton json;
    private JLabel labelCsvPath;
    private JButton openFileButton;
    private JTextArea output;
    private JButton read;
    private JLabel showPath;
    private JTextField url;
    private JLabel xmlPath;
    // End of variables declaration//GEN-END:variables

}
